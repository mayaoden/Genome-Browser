getwd()
shiny::runApp('Downloads/Genome-Browser')
runApp('Downloads/Genome-Browser')
runApp('Downloads/Genome-Browser')
getwd(0)
getwd()
runApp('Downloads/Genome-Browser')
install.packages("SeuratWrappers")
install.packages("SeuratWrappers")
devtools::install_github("satijalab/seurat-wrappers")
install.packages("renv")
library(renv)
shiny::runApp('Downloads/Genome-Browser')
runApp('Downloads/Genome-Browser')
runApp('Downloads/Genome-Browser')
runApp('Downloads/Genome-Browser')
NacreMITFIntegrated_allcell_GFP_positive <- readRDS("./NacreMITFIntegrated_allcell_GFP_positive.rds")
getwd()
setwd("./Downloads/Genome-Browser")
NacreMITFIntegrated_allcell_GFP_positive <- readRDS("./NacreMITFIntegrated_allcell_GFP_positive.rds")
GFP <- subset(NacreMITFIntegrated_allcell_GFP_positive, GFP > 0)
GFP <- SCTransform(GFP, conserve.memory=TRUE)
GFP <- RunPCA(GFP)
GFP  <- RunUMAP(GFP, reduction = "pca", dims = 1:30)
GFP <- FindNeighbors(GFP, reduction = "pca", dims = 1:30)
GFP <- FindClusters(GFP, resolution = 1.2)
DimPlot(GFP)
p1 <- Dimplot(GFP)
p1 <- DimPlot(GFP)
p2 <- DimPlot(GFP, group.by = "Type")
p2
p2 + ggtitle("blah")
p1 / p2
p1 + p2
p3 <- p1 + p2
p3 + ggtitle("blah")
p3 + ggtitle("blah")
p3 + plot_annotation(title = "blah")
p1 / p3
getCDSObject <- function(seurat_object) {
cds <- as.cell_data_set(seurat_object)
cds <- tryCatch({
cluster_cells(cds)
}, error = function(e) {
message("Default clustering method failed: ", e$message)
message("Attempting Louvain clustering method.")
cluster_cells(cds, cluster_method = "louvain")
})
colData(cds)$orig_umap_cluster <- seurat_object$seurat_clusters
cds <- learn_graph(cds, use_partition = TRUE, verbose = FALSE)
return(cds)
}
getCDSObject(GFP)
cds <- getCDSObject(GFP)
getPsuedotime <- function(cds_object, root_node) {
root_group <- colnames(cds_object)[cds_object$orig_umap_cluster == root_node]
order_cells(cds_object, root_cells = root_group)
}
getPsuedotime(cds, 0)
cds_p <- getPsuedotime(cds, 0)
plot_cells(cds_p,
color_cells_by = "pseudotime",
group_cells_by = "orig_umap_cluster",
label_cell_groups = FALSE,
label_groups_by_cluster = TRUE,
label_leaves = FALSE,
label_branch_points = FALSE,
label_roots = FALSE,
trajectory_graph_color = "grey60")
plot_cells(cds_p,
color_cells_by = "pseudotime",
group_cells_by = "orig_umap_cluster",
label_cell_groups = TRUE,
label_groups_by_cluster = TRUE,
label_leaves = FALSE,
label_branch_points = FALSE,
label_roots = FALSE,
trajectory_graph_color = "grey60")
runApp()
runApp()
runApp()
runApp()
runApp()
